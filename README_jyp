echo $UID > foreground_uid
echo 1 > /proc/sys/kernel/app_switch_start
am start app
echo 1 > /proc/sys/kernel/app_switch_fin
play app ~~


**You should handle foreground==0 after real workload




// Optimization plan

- PTE walk (cold page sender)
send to nbd right after it is COUNTER>THRESHOLD ==> Pte walk 1/2

- PTE walk (send_target_page)  DONE!
add one bit in the entry, and set if the page is swapped (very cheap operation) 

- SWAP TRACE TABLE WALK 
current implementation -> periodically walk and find (tgid, vma) which in ZRAM. and send to NBD immediately
it needs periodical random page table walk. any better IDEA?
1. write pte that It has been targetted. and If it is

- STOP sending / during switch_start
It SHOULD be implemented to maximize prefetching --> made roughly, so need to be optimized

- SWAP TRACE TABLE ALLOCATION
current implementaion -> static big table
optimization plan     -> at first, write to static big table, and then dynamically alloc the per-app tablie
                      -> OR, alloc application well considering offline profiling, and dynamically resizing them if it is full

- CPU Binding!!
using CPU bind of Prefetching with different core 

- try_to_free_swap()
current implementation -> called on critical path
optimization plan 	   -> called after switch

// Implementation idea

Should handle if the process exit--> STT free or STT clean

flag off after it is sent --> flag off or swapped flag on
